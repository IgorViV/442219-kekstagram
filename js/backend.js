'use strict';
window.backend = (function () {
  var URL_UPLOAD = 'https://js.dump.academy/kekstagram/data';
  var URL_SEND = 'https://js.dump.academy/kekstagram';

  return {
    upload: function (onLoad, onError) {
      var xhr = new XMLHttpRequest();

      xhr.responseType = 'json';

      xhr.addEventListener('load', function () {
        var error;
        switch (xhr.status) {
          case 200:
            onLoad(xhr.response);
            break;

          case 400:
            error = 'Неверный запрос';
            break;

          case 401:
            error = 'Пользователь не авторизован';
            break;

          case 404:
            error = 'Ничего не найдено';
            break;

          default:
            error = 'Cтатус ответа: : ' + xhr.status + ' ' + xhr.statusText;
        }

        if (error) {
          onError(error);
        }

      });

      xhr.addEventListener('error', function () {
        onError('Произошла ошибка соединения.');
      });

      xhr.addEventListener('timeout', function () {
        onError('Запрос не успел выполниться за ' + xhr.timeout + 'мс');
      });

      xhr.timeout = 10000;

      xhr.open('GET', URL_UPLOAD);
      xhr.send();
    },
    send: function (data, onLoad, onError) {
      var xhr = new XMLHttpRequest();
      xhr.responseType = 'json';

      xhr.addEventListener('load', function () {
        if (xhr.status === 200) {
          onLoad(xhr.response);
        } else {
          onError('Статус ответа: ' + xhr.status + ' ' + xhr.statusText);
        }
      });

      xhr.addEventListener('error', function () {
        onError('Произошла ошибка соединения');
      });

      xhr.addEventListener('timeout', function () {
        onError('Запрос не успел выполниться за ' + xhr.timeout + 'мс');
      });

      xhr.timeout = 10000;

      xhr.open('POST', URL_SEND);
      xhr.send(data);
    }
  };
})();

// Задача

// Создайте модуль backend.js, который экспортирует в глобальную область видимости функции для взаимодействия с удаленным севером через XHR.

// получать с сервера данные с помощью объекта XMLHttpRequest, обрабатывать полученные запросы и передавать полученную информацию в функцию обратного вызова;
// отправлять данные на сервер.

// Функция получения данных с сервера должна принимать на вход следующие параметры:

// onLoad — функция обратного вызова, которая срабатывает при успешном выполнении запроса. При вызове функции onLoad в её единственный параметр передаётся набор полученных данных;
// onError — функция обратного вызова, которая срабатывает при неуспешном выполнении запроса. При вызове функции onError в её единственный параметр передаётся сообщение об ошибке.

// Функция для отправки данных на сервер должна принимать на вход следующие параметры:

// data — объект FormData, который содержит данные формы, которые будут отправлены на сервер;
// onLoad — функция обратного вызова, которая срабатывает при успешном выполнении запроса;
// onError — функция обратного вызова, которая срабатывает при неуспешном выполнении запроса. При вызове функции onError в её единственный параметр передается сообщение об ошибке или объект с описанием ошибки полученный с сервера.
// Подключите модуль backend.js в index.html.

// Кекстаграм
// Доработайте модуль для отрисовки фотографий так, чтобы в качестве данных использовались не случайно сгенерированные объекты, которые вы делали в задании «#13 Пока все дома» а те данные, которые вы загрузите с удалённого сервера через XHR: https://js.dump.academy/kekstagram/data.

// Доработайте обработчик отправки формы, который вы делали в задании «#16 Личный проект: доверяй, но проверяй», так чтобы он отменял действие формы по умолчанию и отправлял данные формы посредством XHR на сервер https://js.dump.academy/kekstagram. При успешной загрузке данных на сервер закрывал окно редактирования фотографии и сбрасывал значения формы на те, что были поставлены по умолчанию.

// Добавьте обработку возможных ошибок при загрузке: покажите сообщение об ошибке в блоке main, используя блок #error из шаблона template.

// Пункты ТЗ, выполненные в задании:
// 3. Отправка данных на сервер
// 3.1. После заполнения всех данных, при нажатии на кнопку «Отправить», все данные из формы, включая изображения, с помощью AJAX-запроса отправляются на сервер https://js.dump.academy/kekstagram методом POST с типом multipart/form-data.

// 3.2. Страница реагирует на неправильно введённые значения в форму. Если данные, введённые в форму, не соответствуют ограничениям, указанным в пунктах 2.3 и 2.4 , форму невозможно отправить на сервер. При попытке отправить форму с неправильными данными, отправки не происходит, а неверно заполненные поля подсвечиваются красной рамкой. Способ добавления рамки и её стиль произвольные.

// 3.3. При успешной отправке формы, форма редактирования изображения закрывается, все данные, введённые в форму и контрол фильтра, приходят в исходное состояние. Поле загрузки фотографии, стилизованное под букву «О» в логотипе, очищается.

// На экран выводится сообщение об успешной загрузке изображения. Разметку сообщения, которая находится блоке #success внутри шаблона template, нужно разместить в main. Сообщение должно исчезать после нажатия на кнопку .success__button, по нажатию на клавишу Esc и по клику на произвольную область экрана.

// 3.4. Если при отправке данных произошла ошибка запроса, нужно показать соответствующее сообщение. Разметку сообщения, которая находится блоке #error внутри шаблона template, нужно разместить в main. Сообщение должно исчезать после нажатия на кнопки .error__button, по нажатию на клавишу Esc и по клику на произвольную область экрана.

// 3.5. Нажатие на кнопку #upload-cancel приводит к закрытию и очистке всех данных, введённых в форму редактирования. Поле загрузки фотографии, стилизованное под букву «О» в логотипе, очищается.
